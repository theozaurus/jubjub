Description
===========

Jubjub is an object to XMPP mapping library designed to be used inside of a web app to simplify the administration of XMPP resources. It aims to provide a very simple interface which hides the complexity of the XMPP protocol allowing your code to communicate intent rather than implementation details. This also makes the code significantly easier to mock and test.

Currently it uses [xmpp_gateway](https://github.com/theozaurus/xmpp_gateway) to communicate to the XMPP server. This allows Jubjub to be used within non evented web servers like [Phusion Passenger](http://www.modrails.com).

It is currently alpha software and merely a proof of concept.

Requirements
============

It is currently fully tested against:

 - Ruby 1.8.7
 - Ruby 1.9.2
 
Examples
========

    require 'jubjub'
    class User
  
      attr_accessor :xmpp_jid, :xmpp_password
  
      # :jid and :password are used to point to methods that contain
      # the credentials required to login as a user
      include Jubjub::User
      jubjub_client :jid => :xmpp_jid, :password => :xmpp_password
  
    end

    u = User.new
    u.xmpp_jid = "theozaurus@jabber.org"
    u.xmpp_password = "ruby"

    # Sensibly defaults to conference.YOUR_CONNECTION_JID
    u.mucs
    => [
      #<Jubjub::Muc:0x1027222b8 @jid="all@conference.jabber.org" @name="all">,
      #<Jubjub::Muc:0x102722038 @jid="all-linux-ru@conference.jabber.org" @name="all-linux-ru">,
      #<Jubjub::Muc:0x102721b60 @jid="allgorithmus@conference.jabber.org" @name="Allgorithmus Project">,
    ...

    # Fancy a list from a different service?
    u.mucs('conference.jabber.ru')
    => [
      #<Jubjub::Muc:0x10166e930 @jid="tota-room@conference.jabber.ru" @name="tota-room (5)">,
      #<Jubjub::Muc:0x10166e6b0 @jid="friends_room@conference.jabber.ru" @name="Friends (6)">,
      #<Jubjub::Muc:0x10166dcb0 @jid="think_linux@conference.jabber.ru" @name="think_linux (n/a)">
    ...

    # Find a room
    u.mucs('conference.jabber.ru')['tota-room']
    => #<Jubjub::Muc:0x10166e930 @jid="tota-room@conference.jabber.ru" @name="tota-room (5)">

    # Create a room
    room = u.mucs.create('jubjub')
    => #<Jubjub::Muc:0x101532f58 @jid="jubjub@conference.jabber.org" @name=nil>

    # Create a room somewhere else
    room = u.mucs('chat.test.com').create('jubjub')
    => #<Jubjub::Muc:0x10161c3b0 @jid="jubjub@chat.test.com" @name=nil>

    # Create a room with a custom configuration
    room = u.mucs.create('customjub'){|c|
      c['muc#roomconfig_allowinvites'] = false
    }
    
    # Destroy a room
    room.destroy
    => true
    
    # Create a persistent room and exit it
    u.mucs.create('persistent'){|c|
      c['muc#roomconfig_persistentroom'] = true
    }.exit
    
    # List pubsub nodes
    u.pubsub
    => [
      #<Jubjub::Pubsub:0x101f23c88 @service="pubsub.jabber.org" @node="facts">,
      #<Jubjub::Pubsub:0x101f23a30 @service="pubsub.jabber.org" @node="news">
    ]
    
    # List from a different service?
    u.pubsub('pubsub.jabber.ru')
    => [
      ...
    ]
    
    # Create a pubsub node
    node = u.pubsub.create('node_1')
    => #<Jubjub::Pubsub:0x101f3bae0 @service="pubsub.jabber.org" @node="node_1">
    
    # Subscribe to node
    subscription = node.subscribe
    => #<Jubjub::PubsubSubscription:0x101effd60 @service="pubsub.jabber.org" @node="node_1" @subscriber="theozaurus@jabber.org" @subid="5129CD7935528" @subscription="subscribed">
    
    # Subscribe to something else
    u.pubsub.subscribe('new_thing')
    => #<Jubjub::PubsubSubscription:0x101effd60 @service="pubsub.jabber.org" @node="new_thing" @subscriber="theozaurus@jabber.org" @subid="5129CD7935528" @subscription="subscribed">
    
    # Unsubscribe
    subscription.unsubscribe
    => true
    
    # Destroy a node directly
    node.destroy
    => true
    
    # Destroy another node
    u.pubsub.destroy('spare_node')
    => true
    
    # Destroy another node with redirect
    u.pubsub.destroy('old_node', 'pubsub.jabber.ru', 'new_new')
    => true
    
TODO
====

 - Error handling
 - MUC user role and affiliation control
 - Service discovery
 - Pubsub / PEP
 - Operations that are not IQ based, such as rosters and two way messaging
 - Other backends (for servers that are evented)